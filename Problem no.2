class Student:
    """
    Represents a single student with their details and grades.
    """
    def __init__(self, student_id, name, course, grade1, grade2, grade3, grade4):
        self.student_id = student_id
        self.name = name
        self.course = course
        self.grades = [grade1, grade2, grade3, grade4]

    def update_grade(self, grade_index, new_grade):
        """Updates a specific grade for the student."""
        if 0 <= grade_index < len(self.grades) and 0 <= new_grade <= 100:
            self.grades[grade_index] = new_grade
            print(f"Grade {grade_index + 1} for {self.name} updated to {new_grade}.\n")
        else:
            print("Invalid grade index or grade value. Please try again.\n")

    def average_grade(self):
        """Calculates the average grade of the student."""
        return sum(self.grades) / len(self.grades)

    def __str__(self):
        grades_str = ', '.join(map(str, self.grades))
        return f"ID: {self.student_id}, Name: {self.name}, Course: {self.course}, Grades: [{grades_str}], Average: {self.average_grade():.2f}"

class GradeManagementSystem:
    """
    A system to manage student records and grades.
    """
    def __init__(self):
        self.students = []

    def add_student(self, student_id, name, course, grade1, grade2, grade3, grade4):
        """Adds a new student to the system."""
        for student in self.students:
            if student.student_id == student_id:
                print("A student with this ID already exists.\n")
                return

        new_student = Student(student_id, name, course, grade1, grade2, grade3, grade4)
        self.students.append(new_student)
        print(f"Student '{name}' has been added.\n")

    def update_student_grade(self, student_id, grade_index, new_grade):
        """Updates a specific grade for a given student."""
        for student in self.students:
            if student.student_id == student_id:
                student.update_grade(grade_index, new_grade)
                return
        print("Student not found.\n")

    def display_students(self):
        """Displays all students and their grades."""
        if not self.students:
            print("No students in the system.\n")
        else:
            print("Student Records:")
            for idx, student in enumerate(self.students, start=1):
                print(f"{idx}. {student}")
            print()

    def calculate_class_average(self):
        """Calculates and displays the class average grade."""
        if not self.students:
            print("No students in the system to calculate the class average.\n")
            return

        total_average = sum(student.average_grade() for student in self.students) / len(self.students)
        print(f"Class Average Grade: {total_average:.2f}\n")

    def run(self):
        """Runs the grade management system in a loop."""
        while True:
            print("Student Grade Management System")
            print("1. Add a new student")
            print("2. Update a student's grade")
            print("3. Display all students and their grades")
            print("4. Calculate and display the class average grade")
            print("5. Exit")
            choice = input("Enter your choice (1-5): ")

            if choice == '1':
                student_id = input("Enter student ID: ")
                name = input("Enter student name: ")
                course = input("Enter course: ")
                grade1 = float(input("Enter grade 1 (0-100): "))
                grade2 = float(input("Enter grade 2 (0-100): "))
                grade3 = float(input("Enter grade 3 (0-100): "))
                grade4 = float(input("Enter grade 4 (0-100): "))
                self.add_student(student_id, name, course, grade1, grade2, grade3, grade4)

            elif choice == '2':
                student_id = input("Enter student ID: ")
                grade_index = int(input("Enter grade number to update (1-4): ")) - 1
                new_grade = float(input("Enter the new grade (0-100): "))
                self.update_student_grade(student_id, grade_index, new_grade)

            elif choice == '3':
                self.display_students()

            elif choice == '4':
                self.calculate_class_average()

            elif choice == '5':
                print("Exiting the program. Goodbye!")
                break

            else:
                print("Invalid choice. Please try again.\n")

# Main Program
if __name__ == "__main__":
    system = GradeManagementSystem()
    system.run()
